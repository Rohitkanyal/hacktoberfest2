// implemented successfully

/*
// Stack  -->> using Singly Linked List , placing node over node  ,
// where topest node is our head 
// LIFO --> Last In and First Out
// push -- only from top 

*/

class Node{
	int data ;
	Node next ;
	
	Node(int data){
		this.data = data ;
	}
}

class Stack{
	Node head ;			// we can also use top instead of head
		
	void push(int data){ 			   // insert from the top only in case of Stack
		Node newnode = new Node(data) ;
		newnode.next = head ;
		head = newnode ;
	}	
	
	void pop(){  						//   deletion is also from the top only
		if(head == null){
			System.out.println("Can't pop in empty list") ; return ;
		}
		System.out.println(head.data + " is popped out") ;
		head = head.next ;
	}
	
	void peek(){  					// to print the top node data in output console
		if(head == null){
			System.out.println("Can't peak in empty list") ; return ;
		}
		System.out.println("Top Data  = " + head.data) ;
	}
	
	void print(){
		Node curr = head ;
		while(curr != null){
			System.out.print(curr.data + " --> ") ;
			curr = curr.next ;
		}
		System.out.println("null") ;
	}
}
class stackimplementation{
	public static void main (String [] args){
		
		Stack mystack = new Stack() ;
		mystack.push(45) ;
		mystack.push(35) ;
		mystack.push(32) ;
		mystack.push(15) ;
		
		mystack.print() ;
		mystack.peek() ;
		mystack.pop() ;
		mystack.print() ;
	}
	
}
